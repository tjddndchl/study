package ch08_collection;

import java.util.ArrayList;

public class CollectionList {

	public static void main(String[] args) {
		/*
		 * 컬렉션 프레임워크는 데이터를 보다 쉽게 다를 수 있도록
		 * 재사용 가능한 컬렉션 클래스를 제공함
		 * List, Set, Map
		 * 1.List : 순서대로 객체를 저장하는 구조, 중복된 원소를 허용
		 * 			원소에 접근하기 위해 인덱스를 사용
		 * 			대표적인 ArrayList, LinkedList
		 * 2.Set  :중복을 허용하지 않는 객체의 모음
		 * 		   원소의 순서는 보장되지 않음
		 * 		   대표 :HashSet, TreeSet
		 * 1.Map  :키와 값의 쌍으로 이루어진 객체를 저장하는 구조
		 * 		   키는 중복될 수 없으며
		 * 		   각 키는 하나의 값을 가리킴.
		 * 		   대표 : HashMap, TreeMap
		 * 
		 */
		
		//ArrayList(동적 배열형태)
		ArrayList<String> student = new ArrayList<String>();
		//<> <--이부분을 제네릭(Generic)이라고함.
		//코드에서 타입의 안정성을 보장할 수 있으며 불필요한 타입 캐스팅을 줄일 수 있음.
		//제네릭 객체(참조타입)만 담을 수 있음.
		//Wrapper Class (기본타입을 객체로 만든 클래스)
		ArrayList<Integer> intList = new ArrayList<Integer>();
		//래퍼클래스는 (byte, short, int, long, float, double, char, boolean)
		//의 기본 타입이름의 앞글자 대문자로 되어있음.
		//list 기몬 메서드 .add(요소) 요소 추가시 사용
		intList.add(5);
		intList.add(1);
		intList.add(2);
		intList.add(4);
		System.out.println(intList);
		
		student.add("팽수");
		student.add("길동");
		student.add("동길");
		System.out.println(student);

	}

}
